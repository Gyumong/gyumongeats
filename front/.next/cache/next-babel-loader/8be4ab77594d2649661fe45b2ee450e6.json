{"ast":null,"code":"/** @format */\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS } from \"../reducers/user\";\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    console.log(action.data);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn)]);\n}","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/gyumongeats/front/sagas/uesr.js"],"names":["all","delay","put","fork","takeLatest","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","logIn","action","type","data","e","console","log","error","response","watchLogIn","userSaga"],"mappings":"AAAA;AAEA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,QAIO,kBAJP;;AAMA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF,UAAMR,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEH,cADE;AAERI,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACE,IAAnB;AACA,UAAMT,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEL,cADE;AAERU,MAAAA,KAAK,EAAEH,CAAC,CAACI,QAAF,CAAWL;AAFV,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,UAAV,GAAuB;AACrB,QAAMb,UAAU,CAACE,cAAD,EAAiBE,KAAjB,CAAhB;AACD;;AAED,eAAe,UAAUU,QAAV,GAAqB;AAClC,QAAMlB,GAAG,CAAC,CAACG,IAAI,CAACc,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["/** @format */\r\n\r\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n} from \"../reducers/user\";\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(action.data);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}