{"ast":null,"code":"/** @format */\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {// data를 받음 ex) {id:'abc@naver.com',password:'123456'}\n  // return axios.post(\"/user/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\n}\n\nfunction* logIn(action) {\n  // 액션을 받음\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data);\n    // 요청이 성공이면 call로 logInAPI를 실행하고 결괏값을 변수 result에 저장\n    // fork는 비동기 call은 동기 => async await 함수 비슷 결괏값 받으면 실행 ㅇㅇ\n    // action에서 data를 꺼내서 logInAPI 함수에 인자로 보냄\n\n    yield put({\n      // 액션을 dispatch\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/gyumongeats/front/sagas/uesr.js"],"names":["all","delay","put","fork","takeLatest","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","logInAPI","data","logIn","action","type","e","console","error","response","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA;AAEA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,kBAPP;;AASA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB,CACtB;AACA;AACD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB;AACA,MAAI;AACF,UAAMb,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;AACA;AACA;AACA;;AACA,UAAMC,GAAG,CAAC;AACR;AACAa,MAAAA,IAAI,EAAER,cAFE;AAGRK,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAHL,KAAD,CAAT;AAKD,GAXD,CAWE,OAAOI,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMd,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEV,cADE;AAERa,MAAAA,KAAK,EAAEF,CAAC,CAACG,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEL;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOM,CAAP,EAAU;AACV,UAAMd,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEP,eADE;AAERU,MAAAA,KAAK,EAAEF,CAAC,CAACG,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF;;AACD,UAAUS,UAAV,GAAuB;AACrB,QAAMjB,UAAU,CAACE,cAAD,EAAiBO,KAAjB,CAAhB;AACD;;AAED,UAAUS,WAAV,GAAwB;AACtB,QAAMlB,UAAU,CAACK,eAAD,EAAkBW,MAAlB,CAAhB;AACD;;AACD,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMvB,GAAG,CAAC,CAACG,IAAI,CAACkB,UAAD,CAAL,EAAmBlB,IAAI,CAACmB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["/** @format */\r\n\r\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n} from \"../reducers/user\";\r\n\r\nfunction logInAPI(data) {\r\n  // data를 받음 ex) {id:'abc@naver.com',password:'123456'}\r\n  // return axios.post(\"/user/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\r\n}\r\n\r\nfunction* logIn(action) {\r\n  // 액션을 받음\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logInAPI, action.data);\r\n    // 요청이 성공이면 call로 logInAPI를 실행하고 결괏값을 변수 result에 저장\r\n    // fork는 비동기 call은 동기 => async await 함수 비슷 결괏값 받으면 실행 ㅇㅇ\r\n    // action에서 data를 꺼내서 logInAPI 함수에 인자로 보냄\r\n    yield put({\r\n      // 액션을 dispatch\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}