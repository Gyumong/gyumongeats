{"ast":null,"code":"/** @format */\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\n\nfunction signUpAPI(data) {// data를 받음 ex) {id:'abc@naver.com',password:'123456'}\n  // return axios.post(\"/user/signUp\", data); // 받은 data를 토대로 서버에 요청을 보냄\n}\n\nfunction* signUp(action) {\n  // 액션을 받음\n  try {\n    yield delay(1000);\n    yield put({\n      // 액션을 dispatch\n      type: SIGN_UP_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {// data를 받음 ex) {id:'abc@naver.com',password:'123456'}\n  // return axios.post(\"/user/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\n}\n\nfunction* logIn(action) {\n  // 액션을 받음\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data);\n    // 요청이 성공이면 call로 logInAPI를 실행하고 결괏값을 변수 result에 저장\n    // fork는 비동기 call은 동기 => async await 함수 비슷 결괏값 받으면 실행 ㅇㅇ\n    // action에서 data를 꺼내서 logInAPI 함수에 인자로 보냄\n\n    yield put({\n      // 액션을 dispatch\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/gyumongeats/front/sagas/uesr.js"],"names":["all","delay","put","fork","takeLatest","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signUpAPI","data","signUp","action","type","e","console","error","response","logInAPI","logIn","logOut","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA;AAEA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP;;AAYA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB,CACvB;AACA;AACD;;AAED,UAAUC,MAAV,CAAiBC,MAAjB,EAAyB;AACvB;AACA,MAAI;AACF,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACR;AACAgB,MAAAA,IAAI,EAAEN,eAFE;AAGRG,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAHL,KAAD,CAAT;AAKD,GAPD,CAOE,OAAOI,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEL,eADE;AAERQ,MAAAA,KAAK,EAAEF,CAAC,CAACG,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF;;AAED,SAASQ,QAAT,CAAkBR,IAAlB,EAAwB,CACtB;AACA;AACD;;AAED,UAAUS,KAAV,CAAgBP,MAAhB,EAAwB;AACtB;AACA,MAAI;AACF,UAAMhB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;AACA;AACA;AACA;;AACA,UAAMC,GAAG,CAAC;AACR;AACAgB,MAAAA,IAAI,EAAEX,cAFE;AAGRQ,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAHL,KAAD,CAAT;AAKD,GAXD,CAWE,OAAOI,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEb,cADE;AAERgB,MAAAA,KAAK,EAAEF,CAAC,CAACG,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAER;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOS,CAAP,EAAU;AACV,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEV,eADE;AAERa,MAAAA,KAAK,EAAEF,CAAC,CAACG,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF;;AACD,UAAUW,UAAV,GAAuB;AACrB,QAAMtB,UAAU,CAACE,cAAD,EAAiBkB,KAAjB,CAAhB;AACD;;AAED,UAAUG,WAAV,GAAwB;AACtB,QAAMvB,UAAU,CAACK,eAAD,EAAkBgB,MAAlB,CAAhB;AACD;;AAED,UAAUG,WAAV,GAAwB;AACtB,QAAMxB,UAAU,CAACO,eAAD,EAAkBK,MAAlB,CAAhB;AACD;;AACD,eAAe,UAAUa,QAAV,GAAqB;AAClC,QAAM7B,GAAG,CAAC,CAACG,IAAI,CAACuB,UAAD,CAAL,EAAmBvB,IAAI,CAACwB,WAAD,CAAvB,EAAsCxB,IAAI,CAACyB,WAAD,CAA1C,CAAD,CAAT;AACD","sourcesContent":["/** @format */\r\n\r\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n} from \"../reducers/user\";\r\n\r\nfunction signUpAPI(data) {\r\n  // data를 받음 ex) {id:'abc@naver.com',password:'123456'}\r\n  // return axios.post(\"/user/signUp\", data); // 받은 data를 토대로 서버에 요청을 보냄\r\n}\r\n\r\nfunction* signUp(action) {\r\n  // 액션을 받음\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      // 액션을 dispatch\r\n      type: SIGN_UP_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logInAPI(data) {\r\n  // data를 받음 ex) {id:'abc@naver.com',password:'123456'}\r\n  // return axios.post(\"/user/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\r\n}\r\n\r\nfunction* logIn(action) {\r\n  // 액션을 받음\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logInAPI, action.data);\r\n    // 요청이 성공이면 call로 logInAPI를 실행하고 결괏값을 변수 result에 저장\r\n    // fork는 비동기 call은 동기 => async await 함수 비슷 결괏값 받으면 실행 ㅇㅇ\r\n    // action에서 data를 꺼내서 logInAPI 함수에 인자로 보냄\r\n    yield put({\r\n      // 액션을 dispatch\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}